/*
 * Lexical Analyser header file.
 *
 * Automatically generated by genHeader.pl from lexer.l, DO NOT HAND EDIT.
 */

#ifndef _LEXER_H_
#define _LEXER_H_

#include <stdio.h>
#include "util.h"

/* Token types. */
typedef enum {
	LEXER_EOF
,	ALTERNATIVE
,	COMMA
,	DOUBLECOLON
,	SEMICOLON
,	LPAREN
,	RPAREN
,	EMPTYLIST
,	LSBRACKET
,	RSBRACKET
,	OROP
,	ANDOP
,	EQUALS
,	EQOP
,	NEOP
,	LTOP
,	LEOP
,	GTOP
,	GEOP
,	COLON
,	PLUS
,	MINUS
,	MULT
,	DIVIDE
,	MODULUS
,	NEGOP
,	ARROW
,	DATA
,	BOOL
,	CHAR
,	NUM
,	ERROR
,	IF
,	THEN
,	ELSE
,	IN
,	LET
,	MAIN
,	MATCH
,	WITH
,	END
,	FALSE
,	TRUE
,	CHARCONST
,	NUMCONST
,	IDENTIFIER
,	VARIABLE
} token_t;

/* Lexical semantic data */
typedef struct yystype {
	token_t lexeme;
	char charval;
	double numval;
	char *strval;
        struct yystype *next; /* internal use only, don't touch. */
} YYSTYPE;

/* The following are defined in the lexer module. */

/* The token currently under consideration. */
extern YYSTYPE yylval;

/* The file handle the lexer is reading from. */
extern FILE *yyin;

/* The current line number. */
extern int line_num;

/* Constant for "no position" things. */
#define noPos (-1)

/*
 * Toggles whether lexemes are echoed to stdout as they are processed.
 */
void toggle_output_lexemes(void);

/*
 * Updates the shared variables to reflect the next token on the input
 * stream.
 */
void lex(void);

/*
 * Returns the nth token ahead of the current one, but does not
 * consume them. In other words, yylval and the lexer state are unchanged.
 */
token_t lex_lookahead(int n);

/*
 * Expect the given lexeme on the input stream; if it is, lex() and return,
 * otherwise parse_error(msg). NOTE: if there is any semantic information
 * attached to the expected lexeme, this function should not be used. (the
 * following token may overwrite the pertinent field of yylval.)
 *
 * Same calling convention as printf(3).
 */
void lex_expect(token_t lexeme, char *fmt, ...);

/*
 * Convert a lexeme number into a comprehendable string.
 */
char *lex_toString(token_t lexeme);

/*
 * Lexically analyse an in-memory string.
 */
void lex_string_start(const char *str);
void lex_string_end(void);

#endif /* _LEXER_H_ */

