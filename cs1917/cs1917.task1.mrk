
!!section banner
 #####  #          #    #######  #####  #######  #####
#     # #    #    ##    #       #     # #    #  #     #
      # #    #   # #    #             #     #         #
 #####  #######    #     #####   #####     #     #####
      #      #     #          #       #   #     #
#     #      #     #    #     # #     #   #     #
 #####       #   #####   #####   #####    #     #######

3415372 Tran, Vincent                           3648/1 SENGA1

Submissions:-

S 0     Wed Mar 14 21:05:26 2012        3415372 tue16-pipe task1 -8:-2
S 0     Fri Mar 16 11:17:23 2012        3415372 tue16-pipe task1 -6:-12
S 0     Tue Mar 20 22:51:17 2012        3415372 tue16-pipe task1 -2:-1
S 0+    Tue Mar 20 22:51:17 2012        3415372 tue16-pipe task1 -4:-1

Wed Mar 28 08:59:28 2012                ## kettledrum.orchestra.cse.unsw.EDU.AU ##
!!section listing
-rwx------ vtra143/vtra143 3996 2012-03-20 22:50 NextThursday.c
-rw------- cs1917/cs1917    195 2012-03-20 22:51 !dryrun_record

===============================================================================
-rwx------ 1 cs1917 cs1917 3996 2012-03-28 08:59 NextThursday.c
===============================================================================

     1  // Given the doomsday for a year, and whether or not it is a
     2  // leap year, this function returns the day of the week for any
     3  // given month and day in the year/
     4  // 0 denoting Thursday, 1 Friday ... 6 Wednesday.
     5  // Vincent Tran z3415372 Mar 2012
     6
     7  #include <stdio.h>
     8  #include <stdlib.h>
     9  #include "NextThursday.h"
    10
    11  // Added a lot of #define statements, but I'm a little bit hesitant
    12  // to use them. Read blog for more. 20/3/2012
    13
    14  #define JANUARY 1
    15  #define FEBRUARY 2
    16  #define MARCH 3
    17  #define APRIL 4
    18  #define MAY 5
    19  #define JUNE 6
    20  #define JULY 7
    21  #define AUGUST 8
    22  #define SEPTEMBER 9
    23  #define OCTOBER 10
    24  #define NOVEMBER 11
    25  #define DECEMBER 12
    26
    27  #define DOOMSDAY_JANUARY 3
    28  #define DOOMSDAY_FEBRUARY 0
    29  #define DOOMSDAY_MARCH 0
    30  #define DOOMSDAY_APRIL 4
    31  #define DOOMSDAY_MAY 9
    32  #define DOOMSDAY_JUNE 6
    33  #define DOOMSDAY_JULY 11
    34  #define DOOMSDAY_AUGUST 8
    35  #define DOOMSDAY_SEPTEMBER 5
    36  #define DOOMSDAY_OCTOBER 10
    37  #define DOOMSDAY_NOVEMBER 7
    38  #define DOOMSDAY_DECEMBER 12
    39
    40
    41  int isLeapYear (int year){
    42      int isLeap;
    43
    44  // Revised leap year algorithm to fit in one if statement
    45  // after seeing that it was okay in code review to have a
    46  // line that long - 20/3/2012
    47      if (((year % 4 == 0) && (year % 100 != 0))||(year % 400 == 0)) {
    48         isLeap = 1;
    49      } else {
    50         isLeap = 0;
    51      }
    52
    53      return isLeap;
    54  }
    55
    56  int yearToDoomsday (int year){
    57  // Used variables a, b, c and d to match the variables used on wikipedia
    58  // Revised variable names from y, a, b, c and d to lastTwoDigits floor,
    59  // remainder, remainderDiv4 and total respectively (14/3/2012)
    60
    61  // Last two digits should be the remainder after dividing by 100
    62      int lastTwoDigits = year%100;
    63      int floor = lastTwoDigits /12;
    64      int remainder = lastTwoDigits %12;
    65      int remainderDiv4 = (lastTwoDigits %12)/4;
    66      int total = (floor + remainder + remainderDiv4)%7;
                                                            ^
                                                            + ================== +
                                                            + Should be #defined +
                                                            + ================== +
    67
    68      int century = year/100 + 1;
    69      int anchor = (5 * century + (century - 1)/4 )%7;
    70
    71      int doomsday = (total + anchor)%7;
    72
    73      return doomsday;
    74  }
    75
    76  int dayOfWeek (int doomsday, int leapYear, int month, int day) {
    77      int dayIndex = 0;
    78
    79  // After confirming that leapYear will be 1 for true exclusively
    80  // it is more efficient (less if statements) to include subtracting
    81  // leapYear from the day (if it's not a leap year, subtract 0)
    82
    83  // Added #defined constants 20/3/2012
    84
    85      if (month == JANUARY){
    86         dayIndex = (day - DOOMSDAY_JANUARY - leapYear + doomsday)%7;
    87      } else if (month == FEBRUARY){
    88         dayIndex = (day - DOOMSDAY_FEBRUARY - leapYear + doomsday)%7;
    89      } else if (month == MARCH){
    90         dayIndex = (day - DOOMSDAY_MARCH + doomsday)%7;
    91      } else if (month == APRIL){
    92         dayIndex = (day - DOOMSDAY_APRIL + doomsday)%7;
    93      } else if (month == MAY){
    94         dayIndex = (day - DOOMSDAY_MAY + doomsday)%7;
    95      } else if (month == JUNE){
    96         dayIndex = (day - DOOMSDAY_JUNE + doomsday)%7;
    97      } else if (month == JULY){
    98         dayIndex = (day - DOOMSDAY_JULY + doomsday)%7;
    99      } else if (month == AUGUST){
   100         dayIndex = (day - DOOMSDAY_AUGUST + doomsday)%7;
   101      } else if (month == SEPTEMBER){
   102         dayIndex = (day - DOOMSDAY_SEPTEMBER + doomsday)%7;
   103      } else if (month == OCTOBER){
   104         dayIndex = (day - DOOMSDAY_OCTOBER + doomsday)%7;
   105      } else if (month == NOVEMBER){
   106         dayIndex = (day - DOOMSDAY_NOVEMBER + doomsday)%7;
   107      } else if (month == DECEMBER){
   108         dayIndex = (day - DOOMSDAY_DECEMBER + doomsday)%7;
   109      }
   110
   111  // To account for negative numbers
                    ^
                    + ======================================================= +
                    + Indent your comments the same level as surrounding code +
                    + ======================================================= +
   112      if (dayIndex < 0){
   113        dayIndex = dayIndex + 7;
   114      }
   115  // Deleted some redundant code after learning that you an still take
   116  // the mod of a negative number; it just returns a negative remainder
   117  // 14/3/2012
   118      return dayIndex;
   119  }
   120
   121  int daysToNextThursday (int year, int month, int day){
   122      int doomsdayOfYear;
   123      int isLeap;
   124      int currentDay;
   125      int nextThursday;
   126
   127      doomsdayOfYear = yearToDoomsday(year);
   128      isLeap = isLeapYear(year);
   129      currentDay = dayOfWeek(doomsdayOfYear, isLeap, month, day);
   130
   131      nextThursday = 7 - currentDay;
   132
   133      return nextThursday;
   134  }

Compiling with -O -Wall -Werror ...


** Compiled OK with Compiler Options -O -Wall -Werror

!!section tests
!!section assess

 -- Acceptance Tests --
** Exit status is 0
isLeapYear(2000) = 1 Correct!
isLeapYear(1904) = 1 Correct!
isLeapYear(2016) = 1 Correct!
isLeapYear(1900) = 0 Correct!
isLeapYear(2001) = 0 Correct!
isLeapYear(2002) = 0 Correct!
isLeapYear(2003) = 0 Correct!
dayOfWeek(0,0,4,4) = 0 Correct!
dayOfWeek(2,0,6,6) = 2 Correct!
dayOfWeek(4,0,8,8) = 4 Correct!
dayOfWeek(6,0,10,10) = 6 Correct!
dayOfWeek(1,0,12,12) = 1 Correct!
dayOfWeek(0,0,9,5) = 0 Correct!
dayOfWeek(1,0,5,9) = 1 Correct!
dayOfWeek(3,0,7,11) = 3 Correct!
dayOfWeek(5,0,11,7) = 5 Correct!
dayOfWeek(6,0,3,7) = 6 Correct!
dayOfWeek(0,0,4,5) = 1 Correct!
dayOfWeek(2,0,6,5) = 1 Correct!
dayOfWeek(4,0,8,9) = 5 Correct!
dayOfWeek(6,0,10,9) = 5 Correct!
dayOfWeek(1,0,12,20) = 2 Correct!
dayOfWeek(0,0,9,9) = 4 Correct!
dayOfWeek(1,0,5,5) = 4 Correct!
dayOfWeek(3,0,7,7) = 6 Correct!
dayOfWeek(5,0,11,11) = 2 Correct!
dayOfWeek(0,0,3,30) = 2 Correct!
dayOfWeek(5,0,2,28) = 5 Correct!
dayOfWeek(5,0,2,27) = 4 Correct!
dayOfWeek(0,0,1,3) = 0 Correct!
dayOfWeek(5,1,2,28) = 4 Correct!
dayOfWeek(5,1,2,27) = 3 Correct!
dayOfWeek(2,1,1,4) = 2 Correct!
yearToDoomsday(2011) = 4 Correct!
yearToDoomsday(3011) = 0 Correct!
yearToDoomsday(2000) = 5 Correct!
yearToDoomsday(1900) = 6 Correct!
yearToDoomsday(1800) = 1 Correct!
yearToDoomsday(1700) = 3 Correct!
yearToDoomsday(1600) = 5 Correct!
daysToNextThursday(2011,3,12) = 5 Correct!
daysToNextThursday(2011,3,16) = 1 Correct!
daysToNextThursday(2011,3,17) = 7 Correct!
daysToNextThursday(2011,4,1) = 6 Correct!
daysToNextThursday(2000,3,16) = 7 Correct!
daysToNextThursday(2000,12,28) = 7 Correct!
daysToNextThursday(2000,7,27) = 7 Correct!
daysToNextThursday(2000,1,6) = 7 Correct!
daysToNextThursday(1600,3,9) = 7 Correct!
daysToNextThursday(1600,9,14) = 7 Correct!
daysToNextThursday(1600,12,7) = 7 Correct!
daysToNextThursday(1600,5,4) = 7 Correct!
daysToNextThursday(1700,12,2) = 7 Correct!
daysToNextThursday(1700,1,7) = 7 Correct!
daysToNextThursday(1700,2,25) = 7 Correct!
daysToNextThursday(7777,6,5) = 7 Correct!
daysToNextThursday(7777,1,2) = 7 Correct!
daysToNextThursday(7777,12,25) = 7 Correct!
daysToNextThursday(7777,2,27) = 7 Correct!
daysToNextThursday(2020,12,24) = 7 Correct!
daysToNextThursday(2020,6,4) = 7 Correct!
daysToNextThursday(2020,1,2) = 7 Correct!
daysToNextThursday(2020,2,27) = 7 Correct!
daysToNextThursday(2500,1,20) = 1 Correct!
daysToNextThursday(2500,2,20) = 5 Correct!
daysToNextThursday(2500,4,25) = 4 Correct!
daysToNextThursday(2501,1,20) = 7 Correct!
daysToNextThursday(2501,2,20) = 4 Correct!
daysToNextThursday(2501,4,25) = 3 Correct!
daysToNextThursday(2502,1,20) = 6 Correct!
daysToNextThursday(2502,2,20) = 3 Correct!
daysToNextThursday(2502,4,25) = 2 Correct!
daysToNextThursday(2503,1,20) = 5 Correct!
daysToNextThursday(2503,2,20) = 2 Correct!
daysToNextThursday(2503,4,25) = 1 Correct!
daysToNextThursday(2504,1,20) = 4 Correct!
daysToNextThursday(2504,2,20) = 1 Correct!
daysToNextThursday(2504,4,25) = 6 Correct!
daysToNextThursday(2505,1,20) = 2 Correct!
daysToNextThursday(2505,2,20) = 6 Correct!
daysToNextThursday(2505,4,25) = 5 Correct!
All acceptance tests passed.  You are Awesome!

!!specialmark  (Acceptance Tests)                       20/20

 -- Style --
5 = HD perfect style, cannot be improved.
4 = DN very good style, a couple of small improvements could be made.
3 = CR OK style, several places where it could be better
2.5 = PS barely satisfactory, many places that need improvement
2 or less = FL unsatisfactory -- your code is a mess that is very difficult to follow

!!nospecialmark  (Style)                                        5/5      <== mark altered (no original mark)

!!marktab       **  MARKER'S  ASSESSMENT  **

!!finalmark     **  FINAL  ASSIGNMENT  MARK:    25/25

3415372 Tran, Vincent                           3648/1 SENGA1





Marked by adrianr on Thu Apr 12 16:09:18 2012

